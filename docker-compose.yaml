services:

  nginx:
    depends_on:
      - nuxt
    restart: unless-stopped
    build:
      context: ./
      dockerfile: ./docker/nginx/Dockerfile
    environment:
      - TZ=UTC
      - AWSAPPENV_DOCKER_NGINX_CONTAINERPORT=${AWSAPPENV_DOCKER_NGINX_CONTAINERPORT}
      - AWSAPPENV_DOCKER_WEBSERVER_CONTAINERPORT=${AWSAPPENV_DOCKER_WEBSERVER_CONTAINERPORT}
      - AWSAPPENV_DOCKER_HOSTNAME=${AWSAPPENV_DOCKER_HOSTNAME}
    networks:
      - appnetwork
    ports:
      - ${AWSAPPENV_DOCKER_NGINX_CONTAINERPORT}:${AWSAPPENV_DOCKER_NGINX_CONTAINERPORT}
    healthcheck:
      test: ["CMD-SHELL", "service nginx status"]
      interval: 3600s
      timeout: 10s
      retries: 3
      start_interval: 15s
      start_period: 30s


  redis:
    image: redis/redis-stack:7.2.0-v11 #for prod: redis-stack-server -> no redis-insight included
    restart: unless-stopped
    command: redis-server --port ${AWSAPPENV_DOCKER_REDIS_PORT} --requirepass ${AWSAPPENV_DOCKER_REDIS_PASS} --appendonly yes --save 120 1 --loglevel warning --loadmodule /opt/redis-stack/lib/rejson.so --loadmodule /opt/redis-stack/lib/redisearch.so
    ports:
     - "${AWSAPPENV_DOCKER_REDIS_PORT}:${AWSAPPENV_DOCKER_REDIS_PORT}"
     #- 8001:8001 # redis-insight
    environment:
      - TZ=UTC
    networks:
      - appnetwork
    volumes:
      - ${AWSAPPENV_DOCKER_LOCALMOUNTPATH_REDIS}:/data
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -a ${AWSAPPENV_DOCKER_REDIS_PASS} -p ${AWSAPPENV_DOCKER_REDIS_PORT} ping | grep PONG"]
      interval: 3600s
      timeout: 10s
      retries: 3
      start_interval: 15s
      start_period: 15s


  nuxt:
    depends_on:
      - redis
    restart: unless-stopped
    build:
      context: ./
      dockerfile: ./docker/nuxt/Dockerfile
      target: nuxt_run
    environment:
      - TZ=UTC
      - NITRO_PORT=${AWSAPPENV_DOCKER_WEBSERVER_CONTAINERPORT}
    env_file:
      - ".env-nuxt.${AWSAPPENV_DOCKER_BUILDENV_CODE}"
    networks:
      - appnetwork
    healthcheck:
      test: ["CMD-SHELL", "node -e \"fetch('http://$(hostname):${AWSAPPENV_DOCKER_WEBSERVER_CONTAINERPORT}/healthcheck').then(res => res.ok)\""]
      interval: 3600s
      timeout: 10s
      retries: 3
      start_interval: 15s
      start_period: 15s

networks:
  appnetwork:
    driver: bridge